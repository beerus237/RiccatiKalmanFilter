% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solve_riccati_iterative.R
\name{solve_riccati_iterative}
\alias{solve_riccati_iterative}
\title{Solve Riccati Equation Iteratively}
\usage{
solve_riccati_iterative(A, B, Q, R, tol = 1e-08, max_iter = 1e+05, alpha = 1)
}
\arguments{
\item{A}{A numeric matrix. The state transition matrix.}

\item{B}{A numeric matrix. The input matrix.}

\item{Q}{A numeric matrix. The state cost matrix.}

\item{R}{A numeric matrix. The input cost matrix.}

\item{tol}{A numeric value. The tolerance for convergence. Default is 1e-8.}

\item{max_iter}{An integer. The maximum number of iterations. Default is 100000.}

\item{alpha}{A numeric value. The step size for the iterative update. Default is 1.}
}
\value{
A numeric matrix. The solution matrix P for the Riccati equation.
}
\description{
This function solves the Riccati equation iteratively.
}
\details{
This function uses an iterative method to solve the discrete-time Riccati equation:
\deqn{P_{k+1} = A P_k A' - A P_k B (R + B' P_k B)^{-1} B' P_k A + Q}
The iteration stops when the change in P between iterations is smaller than the specified tolerance \code{tol},
or when the maximum number of iterations \code{max_iter} is reached.
}
\examples{
A <- matrix(c(1, 0.1, 0, 1), nrow = 2, ncol = 2)
B <- matrix(c(0.1, 0.2), nrow = 2, ncol = 1)
Q <- matrix(c(0.1, 0, 0, 0.1), nrow = 2, ncol = 2)
R <- matrix(0.01, nrow = 1, ncol = 1)
solve_riccati_iterative(A, B, Q, R)
}
